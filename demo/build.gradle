/*============================================================================*
 * Copyright (c) 2018 - Prevo-System AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License, v. 2.0 are satisfied: GNU General Public License, version 3
 * with the GNU Classpath Exception which is
 * available at https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-3.0 WITH Classpath-exception-2.0
 *
 * Contributors:
 *     Prevo-System AG - initial API and implementation
 *===========================================================================*/

import org.apache.tools.ant.filters.*

apply plugin: 'com.palantir.docker'
apply plugin: 'docker-compose'

task buildDemoZip(type: Zip) {
    from("${buildDir}/demo") {
        include('**/*')
        exclude('**/demo-nodes-docker.yml')
    }
    from("src") {
        include "*.bat"
    }
    from(".") {
        include "readme.md"
    }
    archiveName 'demo.zip'
    destinationDir file("${buildDir}/")
}

//
// Hub
//

task prepareHubDockerConfig(type: Copy) {
    from("demo-nodes.yml")

    filter { line ->
        line.replaceAll('localhost:8851', 'node_baloise:8851')
                .replaceAll('localhost:8852', 'node_helvetia:8852')
                .replaceAll('localhost:8853', 'node_zurich:8853')
    }

    rename("demo-nodes.yml", "demo-nodes-docker.yml")
    into "${buildDir}/demo/Hub"
}

task prepareHub(dependsOn: prepareHubDockerConfig, type: Copy) {
    into "${buildDir}/demo/Hub"
    from("${project(':hub').buildDir}/libs") {
        into "lib"
    }
    from("demo-nodes.yml") {
        into "config"
    }
    from("src/hub")
    doLast {
        def javaCmd = "java " +
                "-Dloader.path=config " +
                "-Dserver.port=8859 " +
                "-Dopen.prevo.hub.config.file=file:config/demo-nodes.yml " +
                "-Dspring.profiles.active=demo " +
                "-jar lib/${project(":hub").bootJar.archiveName}"

        def startBatFile = new File("${buildDir}/demo/Hub/start.bat")
        startBatFile.text = "start \"OpenPrevo - demo hub\" " + javaCmd
        startBatFile.executable = true
        def cleanBatFile = new File("${buildDir}/demo/Hub/clean-db.bat")
        cleanBatFile.text = 'del openprevo.mv.db'
        cleanBatFile.executable = true
        def startShFile = new File("${buildDir}/demo/Hub/start.sh")
        startShFile.text = "#!/usr/bin/env bash\n${javaCmd}"
        startShFile.executable = true
        def cleanDbShFile = new File("${buildDir}/demo/Hub/clean-db.sh")
        cleanDbShFile.text = '#!/usr/bin/env bash\nrm openprevo.mv.db'
        cleanDbShFile.executable = true
    }
}

buildDemoZip.dependsOn(prepareHub)
prepareHub.dependsOn { project(":hub").bootJar }

//
// Node
//

// Define Node Configuration Here
// For each configuration gradle will automatically create a prepare${NodeName} task
// which copies all files needed into a sub-directory named the same as the node
def nodeConfiguration = [
        [name: "NodeBaloiseExcel", adapter: "adapter-excel", port: "8851"],
        [name: "NodeBaloisePakt", adapter: "adapter-pakt", port: "8851"],
        [name: "NodeHelvetiaExcel", adapter: "adapter-excel", port: "8852"],
        [name: "NodeZurichExcel", adapter: "adapter-excel", port: "8853"]
]

nodeConfiguration.each { node ->
    task "copyLibs${node.name}"(type: Copy) {
        dependsOn {[
            project(":${node.adapter}").shadowJar,
            project(":node").bootJar
        ]}
        from(project(":${node.adapter}").shadowJar)
        from("${project(':node').buildDir}/libs")
        into "${buildDir}/demo/${node.name}/lib"
    }

    task "copyConfig${node.name}"(type: Copy) {
        from("src/data/${node.name}-config.yml")
        into "${buildDir}/demo/${node.name}/config"
    }
    task "copyDemoData${node.name}"(type: Copy) {
        if (node.adapter == "adapter-excel") {
            from("src/data/${node.name}-Input.xlsx")
        } else if (node.adapter == "adapter-pakt") {
            from fileTree("src/adapter-pakt")
        }
        into "${buildDir}/demo/${node.name}"
    }
    task "createStartScripts${node.name}" {
        doLast {
            def javaCmd = getJavaCommandLineForNode(node)
            def batFile = new File("${buildDir}/demo/${node.name}/start.bat")
            batFile.text = "start \"OpenPrevo - demo node ${node.name}\" " + javaCmd
            batFile.executable = true
            def shFile = new File("${buildDir}/demo/${node.name}/start.sh")
            shFile.text = "#!/usr/bin/env bash\n${javaCmd}"
            shFile.executable = true
        }
    }

    buildDemoZip.dependsOn({
        [
                "copyLibs${node.name}",
                "copyConfig${node.name}",
                "copyDemoData${node.name}",
                "createStartScripts${node.name}"
        ]
    })
}


def getJavaCommandLineForNode(nodeConfiguration) {
    def cmd = "java " +
            "-Dloader.path=lib/${project(':' + nodeConfiguration.adapter).shadowJar.archiveName},config " +
            "-Dserver.port=${nodeConfiguration.port} " +
            "-Dopen.prevo.node.config.file=file:config/${nodeConfiguration.name}-config.yml " +
            "-Dspring.profiles.active=demo"

    if (nodeConfiguration.adapter == "adapter-excel") {
        cmd += " -Dnode.adapter.excel.in.file=${nodeConfiguration.name}-Input.xlsx"
    }
    cmd += " -jar lib/${project(":node").bootJar.archiveName}"
}

assemble.dependsOn(buildDemoZip)

//
// Integration test with docker
//

docker {
    dependsOn buildDemoZip
    name "openprevo/node-demo-base:staging"
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    waitForTcpPorts = true
    stopContainers = true
    removeContainers = true
}

composeUp.dependsOn { tasks.docker }

task integrationTest {
    dependsOn composeUp
    doLast {
        // wait till the matching runs through
        sleep(20000)

        //assert that all nodes are notified with the expected amount of matches
        assert 1 == new File("${buildDir}/demo/NodeBaloiseExcel").listFiles().findAll {
            it.name.startsWith("retirement-fund-out-data")
        }.size()
        assert 1 == new File("${buildDir}/demo/NodeHelvetiaExcel").listFiles().findAll {
            it.name.startsWith("retirement-fund-out-data")
        }.size()
        assert 1 == new File("${buildDir}/demo/NodeZurichExcel").listFiles().findAll {
            it.name.startsWith("retirement-fund-out-data")
        }.size()
    }
}

integrationTest.finalizedBy composeDown
