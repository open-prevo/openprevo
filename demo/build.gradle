task buildDemoZip(type: Zip) {
    from "${buildDir}/demo"
    include('**/*')
    archiveName 'demo.zip'
    destinationDir file("${buildDir}/")
}

task prepareHub(type: Copy) {
    from("${project(':hub').buildDir}/libs")
    from("demo-nodes.yml")
    into "${buildDir}/demo/Hub"
    doLast {
        def javaCmd = "java -Dserver.port=8859 -Dopen.prevo.hub.config.file=file:demo-nodes.yml -jar ${project(":hub").bootJar.archiveName}"
        def batFile = new File("${buildDir}/demo/Hub/start-hub.bat")
        batFile.text = javaCmd
        batFile.executable = true
        def shFile = new File("${buildDir}/demo/Hub/start-hub.sh")
        shFile.text = javaCmd
        shFile.executable = true
    }
}

buildDemoZip.dependsOn(prepareHub)
prepareHub.dependsOn { project(":hub").bootJar }

// Define Node Configuration Here
// For each configuration gradle will automatically create a prepare${NodeName} task
// which copies all files needed into a sub-directory named the same as the node

def nodeConfiguration = [
        [name: "NodeBaloiseExcel", adapter: "adapter-excel", port: "8851"],
        [name: "NodeHelvetiaExcel", adapter: "adapter-excel", port: "8852"],
        [name: "NodeZurichExcel", adapter: "adapter-excel", port: "8853"],
        [name: "NodeExample", adapter: "adapter-example-spring", port: "8888"]
]

def createTask(node) {
    task "prepare${node.name}"(type: Copy) {

        dependsOn { project(":${node.adapter}").shadowJar }
        dependsOn { project(":node").bootJar }

        from(project(":${node.adapter}").shadowJar)
        from("${project(':node').buildDir}/libs")

        if (node.adapter == "adapter-excel") {
            from("src/data/${node.name}-Input.xlsx")
        }

        into "${buildDir}/demo/${node.name}"

        doLast {
            def batFile = new File("${buildDir}/demo/${node.name}/start-node.bat")
            batFile.text = getJavaCommandLineForNode(node)
            batFile.executable = true
            def shFile = new File("${buildDir}/demo/${node.name}/start-node.sh")
            shFile.text = getJavaCommandLineForNode(node)
            shFile.executable = true
        }
    }
    buildDemoZip.dependsOn("prepare${node.name}")
}

nodeConfiguration.each { node ->
    createTask(node)
}

if (hasProperty("PREVO")) {
    def nodeConfigurationPrevo = [
            [name: "NodeBaloisePakt", adapter: "adapter-pakt", port: "8851"],
    ]

    nodeConfigurationPrevo.each { node ->
        createTask(node)
    }
}

def getJavaCommandLineForNode(nodeConfiguration) {

    def cmd = "java -Dloader.path=${project(':' + nodeConfiguration.adapter).shadowJar.archiveName} " +
            "-Dserver.port=${nodeConfiguration.port}"

    if (nodeConfiguration.adapter == "adapter-excel") {
        cmd += " -Dnode.adapter.excel.in.file=${nodeConfiguration.name}-Input.xlsx"
    }
    cmd += " -jar ${project(":node").bootJar.archiveName}"
}

assemble.dependsOn(buildDemoZip)