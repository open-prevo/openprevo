/*============================================================================*
 * Copyright (c) 2018 - Prevo-System AG and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License, v. 2.0 are satisfied: GNU General Public License, version 3
 * with the GNU Classpath Exception which is
 * available at https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-3.0 WITH Classpath-exception-2.0
 * 
 * Contributors:
 *     Prevo-System AG - initial API and implementation
 *===========================================================================*/

apply plugin: 'java'

apply plugin: 'org.springframework.boot'

dependencies {
    compile(project(":hub-api"))

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile("javax.inject:javax.inject")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")
    compile("org.springframework.boot:spring-boot-devtools")

    testCompile("org.testcontainers:testcontainers")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.assertj:assertj-core")
}

test {
    // exclude integration tests by default
    exclude 'ch/prevo/open/hub/integration/**'
    finalizedBy 'ciIntegrationTesting'
}

task ciIntegrationTesting(type: GradleBuild) {
    tasks = ['integrationTest']
    onlyIf {
        System.getenv("TRAVIS") == "true"
    }
}

task integrationTest(type: Test) {
    include 'ch/prevo/open/hub/integration/**'
}

integrationTest.dependsOn { project(":node").tasks.docker }
