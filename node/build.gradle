buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0")

    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile('org.springframework.boot:spring-boot-starter-jetty')

    compile(project(":data-model"))
    compile(project(':encrypted-data-model'))

    compile('javax.inject:javax.inject:1')
    compile('commons-io:commons-io:2.6')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    mainClassName = 'ch.prevo.open.node.NodeApplication'
}

docker {
    dependsOn build, project(":adapter-dummy").build
    name "openprevo/node-dummy:staging"
    files bootJar.archivePath, project(":adapter-dummy").shadowJar.archivePath
    buildArgs(['NODE_JAR': "${bootJar.archiveName}", 'ADAPTER_JAR': "${project(":adapter-dummy").shadowJar.archiveName}"])
}

task runExampleAdapterWithSpring(dependsOn: [bootJar, project(":adapter-example-spring").shadowJar], type: JavaExec) {
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-example-spring').shadowJar.outputs.files.getFiles().first()}"
}

task runDummyNode(dependsOn: [bootJar, project(":adapter-dummy").shadowJar], type: JavaExec) {
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-dummy').shadowJar.outputs.files.getFiles().first()}"
}

task runPaktNode(dependsOn: [bootJar, project(":adapter-pakt").shadowJar], type: JavaExec) {
    systemProperties = System.properties
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-pakt').shadowJar.outputs.files.getFiles().first()}"
}