apply plugin: 'java'

apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.docker'

version = '0.0.1-SNAPSHOT'


dependencies {
    compile(project(":data-model"))
    compile(project(":encrypted-data-model"))

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("javax.inject:javax.inject")
    compile("commons-io:commons-io")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    mainClassName = 'ch.prevo.open.node.NodeApplication'
}

docker {
    dependsOn build, project(":adapter-dummy").build
    name "openprevo/node-dummy:staging"
    files bootJar.archivePath, project(":adapter-dummy").shadowJar.archivePath
    buildArgs(['NODE_JAR': "${bootJar.archiveName}", 'ADAPTER_JAR': "${project(":adapter-dummy").shadowJar.archiveName}"])
}

task runExampleAdapterWithSpring(dependsOn: [bootJar, project(":adapter-example-spring").shadowJar], type: JavaExec) {
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-example-spring').shadowJar.outputs.files.getFiles().first()}"
}

task runDummyNode(dependsOn: [bootJar, project(":adapter-dummy").shadowJar], type: JavaExec) {
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-dummy').shadowJar.outputs.files.getFiles().first()}", "-Dserver.port=8881"
}

task runExcelNode(dependsOn: [bootJar, project(":adapter-excel").shadowJar], type: JavaExec) {
    main = '-jar'
    systemProperties = System.properties
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-excel').shadowJar.outputs.files.getFiles().first()}", "-Dserver.port=8882"
}

if (hasProperty("PREVO")) {
    task runPaktNode(dependsOn: [bootJar, project(":adapter-pakt").shadowJar], type: JavaExec) {
        systemProperties = System.properties
        main = '-jar'
        args "${bootJar.outputs.files.getFiles().first()}"
        jvmArgs "-Dloader.path=${project(':adapter-pakt').shadowJar.outputs.files.getFiles().first()}", "-Dserver.port=8883"
    }
} 
