/*******************************************************************************
 * Copyright (c) 2018 - Prevo-System AG and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License, v. 2.0 are satisfied: GNU General Public License, version 3
 * with the GNU Classpath Exception which is
 * available at https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-3.0 WITH Classpath-exception-2.0
 * 
 * Contributors:
 *     Prevo-System AG - initial API and implementation
 ******************************************************************************/

apply plugin: 'java'

apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.docker'

dependencies {
    compile(project(":data-model"))
    compile(project(":encrypted-data-model"))

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("javax.inject:javax.inject")
    compile("commons-io:commons-io")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    mainClassName = 'ch.prevo.open.node.NodeApplication'
}

docker {
    dependsOn build, project(":adapter-dummy").build
    name "openprevo/node-dummy:staging"
    files bootJar.archivePath, project(":adapter-dummy").shadowJar.archivePath
    buildArgs(['NODE_JAR': "${bootJar.archiveName}", 'ADAPTER_JAR': "${project(":adapter-dummy").shadowJar.archiveName}"])
}

task runExampleAdapterWithSpring(dependsOn: [bootJar, project(":adapter-example-spring").shadowJar], type: JavaExec) {
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-example-spring').shadowJar.outputs.files.getFiles().first()}"
}

task runDummyNode(dependsOn: [bootJar, project(":adapter-dummy").shadowJar], type: JavaExec) {
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-dummy').shadowJar.outputs.files.getFiles().first()}", "-Dserver.port=8881"
}

task runExcelNode(dependsOn: [bootJar, project(":adapter-excel").shadowJar], type: JavaExec) {
    main = '-jar'
    systemProperties = System.properties
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-excel').shadowJar.outputs.files.getFiles().first()}", "-Dserver.port=8882"
}


task runPaktNode(dependsOn: [bootJar, project(":adapter-pakt").shadowJar], type: JavaExec) {
    systemProperties = System.properties
    main = '-jar'
    args "${bootJar.outputs.files.getFiles().first()}"
    jvmArgs "-Dloader.path=${project(':adapter-pakt').shadowJar.outputs.files.getFiles().first()}", "-Dserver.port=8883"
} 
